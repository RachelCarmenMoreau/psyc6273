function othresh( subcode )% OTHRESH  Measure an orientation discrimination contrast threshold% % usage:  othresh( subcode )% set default subject codeif nargin<1    subcode='jfk';end% add calibration toolbox to pathaddpath( 'caltools' );% stimulus characteristicsbglumC = 30;               % background luminance (cd/m^2)lambdaD = 0.25;            % grating wavelength (degrees)thetaR = pi/32;            % grating orientation from vertical (radians)sigmaD = 0.5;              % gabor space constant (degrees)noisestd = 0.20;           % pixelwise noise standard deviationframesizeD = 7*sigmaD;     % stimulus size (degrees)stimdurS = 0.500;          % stimulus duration (seconds)cstlist = 0.01:0.01:0.10;  % stimulus contrastsviewdistM = 0.57;          % viewing distance (meters)% initialize calibration toolboxinitcal;% set viewing distancesetviewdist( viewdistM );% convert stimulus parameters to machine unitslambdaP = deg2pixel( lambdaD );sigmaP  = deg2pixel( sigmaD );framesizeP = deg2pixel( framesizeD );bglumRGB = lum2rgb(bglumC);bglumRGB = bglumRGB(:)';% make unit-contrast gaborsleftgabor  = gabor2d(lambdaP, thetaR,0,sigmaP,framesizeP);rightgabor = gabor2d(lambdaP,-thetaR,0,sigmaP,framesizeP);% make auditory feedback signalshighbeep = sin(2*pi*((0:512)/8192)*880);lowbeep  = sin(2*pi*((0:512)/8192)*440);% set preferencesScreen('Preference', 'SkipSyncTests', 2 );Screen('Preference', 'SuppressAllWarnings',1);% open onscreen window[winID,winRect] = Screen('OpenWindow',0,bglumRGB);HideCursor;     % hide mouse cursorListenChar(2);  % suppress characters% null the colour lookup tablegtable = repmat( linspace(0,1,256)', [ 1 3 ] );Screen('LoadNormalizedGammaTable',winID,gtable);% calculate stimulus positionstimRect = CenterRect( [ 0 0 framesizeP framesizeP ], winRect );% open data file and write headerfname=[ 'ot_' subcode '.txt' ];fid=fopen(fname,'a');if fid==-1	error('Unable to open data file.');endfprintf(fid,'%% OTHRESH_EXPT  Orientation discrimination threshold experiment\n');fprintf(fid,'%% subject %s\n',subcode);fprintf(fid,'%% time %s\n',datestr(now));fprintf(fid,'%% viewing distance %f, background luminance %f, lambdaP %f, thetaR %f, framesizeP %f, noisestd %f, stimdurS %.3f\n',viewdistM,bglumC,lambdaP,framesizeP,thetaR,noisestd,stimdurS);fprintf(fid,'%% columns:  trial, stimright, contrast, stimdur, respright, correct, rt\n');% trialsfor t = 1:100        % pause before trial    pause(1);		% pick a contrast level    cst = cstlist( ceil(rand*numel(cstlist)) );	    % choose orientation    stimright = (rand<0.5);    if stimright==1        stim=rightgabor;    else        stim=leftgabor;    end	% create stimulus	grating = bglumC*( 1 + cst*stim + noisestd*randn(framesizeP) );    grating = lum2rgb(grating);        % show stimulus    Screen('PutImage',winID,grating,stimRect);    timeon = Screen('Flip',winID);        % clear stimulus    when = timeon + stimdurS;    Screen('FillRect',winID,bglumRGB);    timeoff = Screen('Flip',winID,when);    actualdurS = timeoff - timeon;        % get response    [ resp, presstime ] = getkey;    if isnan(resp)        break    end    % check response    respright = ( resp == 2 );    correct = ( stimright == respright );    rt = presstime - timeoff;    	% give auditory feedback    if correct		sound(highbeep);	else		sound(lowbeep);    end	% save trial data	fprintf(fid,'%d\t%d\t%.3f\t%.3f\t%d\t%d\t%.3f\n',t,stimright,cst,actualdurS,respright,correct,rt);	end% close data filefprintf(fid,'%% end of session\n\n');fclose(fid);% close windowsScreen('Close',winID);Screen('CloseAll');ShowCursor;ListenChar(0);return